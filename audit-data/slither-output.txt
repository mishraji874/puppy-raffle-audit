
INFO:Detectors:
PuppyRaffle.withdrawFees() (src/PuppyRaffle.sol#156-162) sends eth to arbitrary user
        Dangerous calls:
        - (success) = feeAddress.call{value: totalFees}() (src/PuppyRaffle.sol#160)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
PuppyRaffle.selectWinner() (src/PuppyRaffle.sol#124-153) uses a weak PRNG: "winnerIndex = uint256(keccak256(bytes)(abi.encodePacked(msg.sender,block.timestamp,block.difficulty))) % players.length (src/PuppyRaffle.sol#127-128)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
Reentrancy in PuppyRaffle.refund(uint256) (src/PuppyRaffle.sol#94-104):
        External calls:
        - (success) = msg.sender.call{value: entranceFee}() (src/PuppyRaffle.sol#99)
        State variables written after the call(s):
        - players[playerIndex] = address(0) (src/PuppyRaffle.sol#102)
        PuppyRaffle.players (src/PuppyRaffle.sol#22) can be used in cross function reentrancies:
        - PuppyRaffle.enterRaffle(address[]) (src/PuppyRaffle.sol#77-90)
        - PuppyRaffle.getActivePlayerIndex(address) (src/PuppyRaffle.sol#109-116)
        - PuppyRaffle.players (src/PuppyRaffle.sol#22)
        - PuppyRaffle.refund(uint256) (src/PuppyRaffle.sol#94-104)
        - PuppyRaffle.selectWinner() (src/PuppyRaffle.sol#124-153)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
PuppyRaffle.withdrawFees() (src/PuppyRaffle.sol#156-162) uses a dangerous strict equality:
        - require(bool,string)(address(this).balance == uint256(totalFees),PuppyRaffle: There are currently players active!) (src/PuppyRaffle.sol#159)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
PuppyRaffle.constructor(uint256,address,uint256)._feeAddress (src/PuppyRaffle.sol#59) lacks a zero-check on :
                - feeAddress = _feeAddress (src/PuppyRaffle.sol#61)
PuppyRaffle.changeFeeAddress(address).newFeeAddress (src/PuppyRaffle.sol#166) lacks a zero-check on :
                - feeAddress = newFeeAddress (src/PuppyRaffle.sol#167)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in PuppyRaffleTest.testCanEnterRaffle() (test/PuppyRaffleTest.t.sol#30-35):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#33)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#33)
        State variables written after the call(s):
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testCanEnterRaffleMany() (test/PuppyRaffleTest.t.sol#44-51):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        State variables written after the call(s):
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testCanEnterRaffleMany() (test/PuppyRaffleTest.t.sol#44-51):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        State variables written after the call(s):
        - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testCanGetRefund() (test/PuppyRaffleTest.t.sol#88-96):
        External calls:
        - vm.prank(playerOne) (test/PuppyRaffleTest.t.sol#92)
        - puppyRaffle.refund(indexOfPlayer) (test/PuppyRaffleTest.t.sol#93)
        - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playerEntered() (test/PuppyRaffleTest.t.sol#88)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        External calls sending eth:
        - playerEntered() (test/PuppyRaffleTest.t.sol#88)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        State variables written after the call(s):
        - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testGetActivePlayerIndexManyPlayers() (test/PuppyRaffleTest.t.sol#117-125):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        State variables written after the call(s):
        - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testGetActivePlayerIndexManyPlayers() (test/PuppyRaffleTest.t.sol#117-125):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        State variables written after the call(s):
        - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testGettingRefundRemovesThemFromArray() (test/PuppyRaffleTest.t.sol#98-105):
        External calls:
        - vm.prank(playerOne) (test/PuppyRaffleTest.t.sol#101)
        - puppyRaffle.refund(indexOfPlayer) (test/PuppyRaffleTest.t.sol#102)
        - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playerEntered() (test/PuppyRaffleTest.t.sol#98)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        External calls sending eth:
        - playerEntered() (test/PuppyRaffleTest.t.sol#98)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        State variables written after the call(s):
        - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testPuppyUriIsRight() (test/PuppyRaffleTest.t.sol#187-196):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#188)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#189)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#194)
        - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#187)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#187)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        State variables written after the call(s):
        - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testSelectWinner() (test/PuppyRaffleTest.t.sol#159-165):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#160)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#161)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#163)
        - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#159)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#159)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        State variables written after the call(s):
        - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testSelectWinnerGetsAPuppy() (test/PuppyRaffleTest.t.sol#179-185):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#180)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#181)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#183)
        - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#179)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#179)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        State variables written after the call(s):
        - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testSelectWinnerGetsPaid() (test/PuppyRaffleTest.t.sol#167-177):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#170)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#171)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#175)
        - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#167)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#167)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        State variables written after the call(s):
        - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reentrancy in PuppyRaffleTest.testWithdrawFees() (test/PuppyRaffleTest.t.sol#206-215):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#207)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#208)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#212)
        - puppyRaffle.withdrawFees() (test/PuppyRaffleTest.t.sol#213)
        - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#206)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#206)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        State variables written after the call(s):
        - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
                - _failed = true (lib/forge-std/lib/ds-test/src/test.sol#75)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in PuppyRaffle.refund(uint256) (src/PuppyRaffle.sol#94-104):
        External calls:
        - (success) = msg.sender.call{value: entranceFee}() (src/PuppyRaffle.sol#99)
        Event emitted after the call(s):
        - RaffleRefunded(playerAddress) (src/PuppyRaffle.sol#103)
Reentrancy in PuppyRaffle.selectWinner() (src/PuppyRaffle.sol#124-153):
        External calls:
        - (success) = winner.call{value: prizePool}() (src/PuppyRaffle.sol#150)
        - _safeMint(winner,tokenId) (src/PuppyRaffle.sol#152)
                - returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#441-447)
                - (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#119)
        External calls sending eth:
        - (success) = winner.call{value: prizePool}() (src/PuppyRaffle.sol#150)
        - _safeMint(winner,tokenId) (src/PuppyRaffle.sol#152)
                - (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#119)
        Event emitted after the call(s):
        - Transfer(address(0),to,tokenId) (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#343)
                - _safeMint(winner,tokenId) (src/PuppyRaffle.sol#152)
Reentrancy in PuppyRaffleTest.testCanEnterRaffle() (test/PuppyRaffleTest.t.sol#30-35):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#33)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#33)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
        - log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
        - log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#34)
Reentrancy in PuppyRaffleTest.testCanEnterRaffleMany() (test/PuppyRaffleTest.t.sol#44-51):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
        - log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
        - log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
                - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
Reentrancy in PuppyRaffleTest.testCanEnterRaffleMany() (test/PuppyRaffleTest.t.sol#44-51):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        - assertEq(puppyRaffle.players(0),playerOne) (test/PuppyRaffleTest.t.sol#49)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#48)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
                - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
        - log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
                - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
        - log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
                - assertEq(puppyRaffle.players(1),playerTwo) (test/PuppyRaffleTest.t.sol#50)
Reentrancy in PuppyRaffleTest.testCanGetRefund() (test/PuppyRaffleTest.t.sol#88-96):
        External calls:
        - vm.prank(playerOne) (test/PuppyRaffleTest.t.sol#92)
        - puppyRaffle.refund(indexOfPlayer) (test/PuppyRaffleTest.t.sol#93)
        - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playerEntered() (test/PuppyRaffleTest.t.sol#88)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        External calls sending eth:
        - playerEntered() (test/PuppyRaffleTest.t.sol#88)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(address(playerOne).balance,balanceBefore + entranceFee) (test/PuppyRaffleTest.t.sol#95)
Reentrancy in PuppyRaffleTest.testGetActivePlayerIndexManyPlayers() (test/PuppyRaffleTest.t.sol#117-125):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
Reentrancy in PuppyRaffleTest.testGetActivePlayerIndexManyPlayers() (test/PuppyRaffleTest.t.sol#117-125):
        External calls:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerOne),0) (test/PuppyRaffleTest.t.sol#123)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        External calls sending eth:
        - puppyRaffle.enterRaffle{value: entranceFee * 2}(players) (test/PuppyRaffleTest.t.sol#121)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(puppyRaffle.getActivePlayerIndex(playerTwo),1) (test/PuppyRaffleTest.t.sol#124)
Reentrancy in PuppyRaffleTest.testGettingRefundRemovesThemFromArray() (test/PuppyRaffleTest.t.sol#98-105):
        External calls:
        - vm.prank(playerOne) (test/PuppyRaffleTest.t.sol#101)
        - puppyRaffle.refund(indexOfPlayer) (test/PuppyRaffleTest.t.sol#102)
        - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playerEntered() (test/PuppyRaffleTest.t.sol#98)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        External calls sending eth:
        - playerEntered() (test/PuppyRaffleTest.t.sol#98)
                - puppyRaffle.enterRaffle{value: entranceFee}(players) (test/PuppyRaffleTest.t.sol#84)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
                - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
        - log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
                - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
        - log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
                - assertEq(puppyRaffle.players(0),address(0)) (test/PuppyRaffleTest.t.sol#104)
Reentrancy in PuppyRaffleTest.testPuppyUriIsRight() (test/PuppyRaffleTest.t.sol#187-196):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#188)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#189)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#194)
        - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#187)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#187)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [string]) (lib/forge-std/lib/ds-test/src/test.sol#523)
                - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
        - log_named_string(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#524)
                - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
        - log_named_string(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#525)
                - assertEq(puppyRaffle.tokenURI(0),expectedTokenUri) (test/PuppyRaffleTest.t.sol#195)
Reentrancy in PuppyRaffleTest.testSelectWinner() (test/PuppyRaffleTest.t.sol#159-165):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#160)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#161)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#163)
        - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#159)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#159)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [address]) (lib/forge-std/lib/ds-test/src/test.sol#109)
                - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
        - log_named_address(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#110)
                - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
        - log_named_address(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#111)
                - assertEq(puppyRaffle.previousWinner(),playerFour) (test/PuppyRaffleTest.t.sol#164)
Reentrancy in PuppyRaffleTest.testSelectWinnerGetsAPuppy() (test/PuppyRaffleTest.t.sol#179-185):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#180)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#181)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#183)
        - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#179)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#179)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(puppyRaffle.balanceOf(playerFour),1) (test/PuppyRaffleTest.t.sol#184)
Reentrancy in PuppyRaffleTest.testSelectWinnerGetsPaid() (test/PuppyRaffleTest.t.sol#167-177):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#170)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#171)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#175)
        - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#167)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#167)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(address(playerFour).balance,balanceBefore + expectedPayout) (test/PuppyRaffleTest.t.sol#176)
Reentrancy in PuppyRaffleTest.testWithdrawFees() (test/PuppyRaffleTest.t.sol#206-215):
        External calls:
        - vm.warp(block.timestamp + duration + 1) (test/PuppyRaffleTest.t.sol#207)
        - vm.roll(block.number + 1) (test/PuppyRaffleTest.t.sol#208)
        - puppyRaffle.selectWinner() (test/PuppyRaffleTest.t.sol#212)
        - puppyRaffle.withdrawFees() (test/PuppyRaffleTest.t.sol#213)
        - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
                - (status) = HEVM_ADDRESS.call(abi.encodePacked(bytes4(keccak256(bytes)(store(address,bytes32,bytes32))),abi.encode(HEVM_ADDRESS,bytes32(failed),bytes32(uint256(0x01))))) (lib/forge-std/lib/ds-test/src/test.sol#67-72)
        - playersEntered() (test/PuppyRaffleTest.t.sol#206)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        External calls sending eth:
        - playersEntered() (test/PuppyRaffleTest.t.sol#206)
                - puppyRaffle.enterRaffle{value: entranceFee * 4}(players) (test/PuppyRaffleTest.t.sol#136)
        Event emitted after the call(s):
        - log(Error: a == b not satisfied [uint]) (lib/forge-std/lib/ds-test/src/test.sol#159)
                - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
        - log_named_uint(      Left,a) (lib/forge-std/lib/ds-test/src/test.sol#160)
                - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
        - log_named_uint(     Right,b) (lib/forge-std/lib/ds-test/src/test.sol#161)
                - assertEq(address(feeAddress).balance,expectedPrizeAmount) (test/PuppyRaffleTest.t.sol#214)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
PuppyRaffle.selectWinner() (src/PuppyRaffle.sol#124-153) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool,string)(block.timestamp >= raffleStartTime + raffleDuration,PuppyRaffle: Raffle not over) (src/PuppyRaffle.sol#125)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Different versions of Solidity are used:
        - Version used: ['0.7.6', '>=0.4.22<0.9.0', '>=0.5.0', '>=0.6.0', '>=0.6.0<0.8.0', '>=0.6.0<0.9.0', '>=0.6.2<0.8.0', '>=0.6.2<0.9.0', '^0.7.6']
        - 0.7.6 (script/DeployPuppyRaffle.sol#2)
        - >=0.4.22<0.9.0 (lib/forge-std/src/StdStyle.sol#2)
        - >=0.4.22<0.9.0 (lib/forge-std/src/console.sol#2)
        - >=0.4.22<0.9.0 (lib/forge-std/src/console2.sol#2)
        - >=0.5.0 (lib/forge-std/lib/ds-test/src/test.sol#16)
        - >=0.6.0 (lib/base64/base64.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/introspection/ERC165.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/introspection/IERC165.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/math/SafeMath.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/utils/Context.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/utils/EnumerableMap.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/utils/EnumerableSet.sol#3)
        - >=0.6.0<0.8.0 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#3)
        - >=0.6.0<0.9.0 (lib/forge-std/src/StdJson.sol#2)
        - >=0.6.2<0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol#3)
        - >=0.6.2<0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Enumerable.sol#3)
        - >=0.6.2<0.8.0 (lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Metadata.sol#3)
        - >=0.6.2<0.8.0 (lib/openzeppelin-contracts/contracts/utils/Address.sol#3)
        - >=0.6.2<0.9.0 (lib/forge-std/src/Base.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/Script.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdAssertions.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdChains.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdCheats.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdError.sol#3)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdInvariant.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdMath.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdStorage.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/StdUtils.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/Test.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/Vm.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/interfaces/IMulticall3.sol#2)
        - >=0.6.2<0.9.0 (lib/forge-std/src/safeconsole.sol#2)
        - ABIEncoderV2 (lib/forge-std/src/StdCheats.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/StdInvariant.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/StdJson.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/StdUtils.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/Test.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/Vm.sol#4)
        - ABIEncoderV2 (lib/forge-std/src/interfaces/IMulticall3.sol#4)
        - ABIEncoderV2 (test/PuppyRaffleTest.t.sol#3)
        - ^0.7.6 (src/PuppyRaffle.sol#2)
        - ^0.7.6 (test/PuppyRaffleTest.t.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
PuppyRaffle._isActivePlayer() (src/PuppyRaffle.sol#172-179) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Pragma version0.7.6 (script/DeployPuppyRaffle.sol#2) allows old versions
Pragma version^0.7.6 (src/PuppyRaffle.sol#2) allows old versions
Pragma version^0.7.6 (test/PuppyRaffleTest.t.sol#2) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in PuppyRaffle.refund(uint256) (src/PuppyRaffle.sol#94-104):
        - (success) = msg.sender.call{value: entranceFee}() (src/PuppyRaffle.sol#99)
Low level call in PuppyRaffle.selectWinner() (src/PuppyRaffle.sol#124-153):
        - (success) = winner.call{value: prizePool}() (src/PuppyRaffle.sol#150)
Low level call in PuppyRaffle.withdrawFees() (src/PuppyRaffle.sol#156-162):
        - (success) = feeAddress.call{value: totalFees}() (src/PuppyRaffle.sol#160)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
CommonBase.CONSOLE (lib/forge-std/src/Base.sol#11) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.CREATE2_FACTORY (lib/forge-std/src/Base.sol#13) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.DEFAULT_SENDER (lib/forge-std/src/Base.sol#15) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.DEFAULT_TEST_CONTRACT (lib/forge-std/src/Base.sol#17) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.MULTICALL3_ADDRESS (lib/forge-std/src/Base.sol#19) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.SECP256K1_ORDER (lib/forge-std/src/Base.sol#21-22) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.UINT256_MAX (lib/forge-std/src/Base.sol#24-25) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.stdstore (lib/forge-std/src/Base.sol#28) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
ScriptBase.vmSafe (lib/forge-std/src/Base.sol#34) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
DeployPuppyRaffle.entranceFee (script/DeployPuppyRaffle.sol#8) is never used in DeployPuppyRaffle (script/DeployPuppyRaffle.sol#7-22)
CommonBase.CONSOLE (lib/forge-std/src/Base.sol#11) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.CREATE2_FACTORY (lib/forge-std/src/Base.sol#13) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.DEFAULT_SENDER (lib/forge-std/src/Base.sol#15) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.DEFAULT_TEST_CONTRACT (lib/forge-std/src/Base.sol#17) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.MULTICALL3_ADDRESS (lib/forge-std/src/Base.sol#19) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.SECP256K1_ORDER (lib/forge-std/src/Base.sol#21-22) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.UINT256_MAX (lib/forge-std/src/Base.sol#24-25) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
CommonBase.stdstore (lib/forge-std/src/Base.sol#28) is never used in PuppyRaffleTest (test/PuppyRaffleTest.t.sol#8-216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
DeployPuppyRaffle.duration (script/DeployPuppyRaffle.sol#10) should be constant 
DeployPuppyRaffle.entranceFee (script/DeployPuppyRaffle.sol#8) should be constant 
PuppyRaffle.commonImageUri (src/PuppyRaffle.sol#37) should be constant 
PuppyRaffle.legendaryImageUri (src/PuppyRaffle.sol#47) should be constant 
PuppyRaffle.rareImageUri (src/PuppyRaffle.sol#42) should be constant 
PuppyRaffleTest.duration (test/PuppyRaffleTest.t.sol#16) should be constant 
PuppyRaffleTest.entranceFee (test/PuppyRaffleTest.t.sol#10) should be constant 
PuppyRaffleTest.feeAddress (test/PuppyRaffleTest.t.sol#15) should be constant 
PuppyRaffleTest.playerFour (test/PuppyRaffleTest.t.sol#14) should be constant 
PuppyRaffleTest.playerOne (test/PuppyRaffleTest.t.sol#11) should be constant 
PuppyRaffleTest.playerThree (test/PuppyRaffleTest.t.sol#13) should be constant 
PuppyRaffleTest.playerTwo (test/PuppyRaffleTest.t.sol#12) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Detectors:
PuppyRaffle.raffleDuration (src/PuppyRaffle.sol#23) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:. analyzed (42 contracts with 85 detectors), 73 result(s) found